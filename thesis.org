* Imaginary programming is a new programming paradigm based on language models

** Main idea
Imaginary code is code who's behaviour is influenced by language models. I will
attempt to formalise imaginary programming, make some demonstrations of
programming within this paradigm and explore some useful data structures and
algorithms that are both impurely and purely imaginary. The motivation for
formalising this is not purely academic. Imaginary code needs to
be recognised as code so that it may be protected by GPL. I also posit that
models of natural language, if trained on source code, create a holographic
representation of the software, which I argue is a derivative work and a
reflection of the original code. I argue that a holographic representation of
software both within and without (how it is used) is just another
representation of the software, alongside the original source code, just as
functions may be represented differently.

** Supporting idea - pure imaginary programming
Pure imaginary programming is a type of programming where the original language
models may not even be known.

I demonstate that collaborative pure imaginary programming is useful.

** Supporting idea - language models contain a holographic representation of software
I am able to generate parts of GPL protected software using language models and
can query the language models as to how they are used.

Therefore, the software exists now in the latent space of a language model in
the form of a hologram.

** Give one more reason that supports your main idea
Tell us one reason that supports your opinion. Write your reason as a clear
statement. Be sure that you can support this reason with logical facts and
evidence.

** Include an opposing viewpoint to your main idea, if applicable
A good thesis statement acknowledges that there is always another side to the argument. So, include an opposing viewpoint (a counterargument) to your opinion. Basically, write down what a person who disagrees with your position might say about your topic.